#_preseed_V1

#d-i apt-setup/non-free-firmware boolean false

# B.4.1. Localization

d-i debian-installer/language string en
d-i debian-installer/country string SG
d-i debian-installer/locale string en_SG.UTF-8
d-i keyboard-configuration/xkb-keymap select us

# B.4.2. Network configuration
#d-i netcfg/choose_interface select auto
#d-i netcfg/use_autoconfig boolean true
#d-i netcfg/get_nameservers string
#d-i netcfg/get_hostname string debian
#d-i netcfg/get_domain string 

# B.4.3. Network console

# B.4.4. Mirror settings

d-i mirror/protocol string http
d-i mirror/country string manual
d-i mirror/http/hostname string http://192.168.0.10
#d-i mirror/http/hostname string http://deb.debian.org
d-i mirror/http/directory string /debian
d-i mirror/http/proxy string

# B.4.5. Account setup

d-i passwd/root-login boolean true
d-i passwd/make-user boolean true
d-i passwd/root-password password password
d-i passwd/root-password-again password password

#create account for challenge below
# To create a normal user account.
d-i passwd/user-fullname string Jane Doe
d-i passwd/username string janedoe
# Normal user's password, either in clear text
d-i passwd/user-password password qwertyuiop
d-i passwd/user-password-again password qwertyuiop

# B.4.6. Clock and time zone setup

d-i clock-setup/utc boolean true
d-i time/zone string Etc/UTC
d-i clock-setup/ntp boolean true
d-i clock-setup/ntp-server string debian.pool.ntp.org

# B.4.7. Partitioning

d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string regular
d-i partman-auto/choose_recipe select atomic
d-i partman-partitioning/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

# B.4.7.3. Controlling how partitions are mounted

d-i partman/mount_style select uuid

# B.4.8. Base system installation

d-i base-installer/kernel/image string linux-image-amd64

# B.4.9. Apt setup
d-i debian-installer/allow_unauthenticated boolean true

# B.4.10. Package selection
tasksel tasksel/first multiselect standard, ssh-server
d-i pkgsel/upgrade select full-upgrade
popularity-contest popularity-contest/participate boolean false

# B.4.11. Boot loader installation

d-i grub-installer/only_debian boolean true
d-i grub-installer/bootdev string /dev/sda

# B.4.12. Finishing up the installation

d-i finish-install/reboot_in_progress note
d-i cdrom-detect/eject boolean true

# B.4.13. Preseeding other packages

# B.5.1. Running custom commands during the installation

#used to prevent the error that the release file is out of date
d-i partman/early_command string echo "echo 'Acquire::Check-Valid-Until \"false\";' > /target/etc/apt/apt.conf.d/02IgnoreValidUntil" > /usr/lib/apt-setup/generators/02IgnoreValidUntil ; chmod +x /usr/lib/apt-setup/generators/02IgnoreValidUntil

d-i preseed/late_command string \
#flag is displayed on login after a successful boot
wget -O /target/etc/motd http://192.168.0.10/motd; \
#flag is displayed after either cat/nano malicious.sh
echo -e \
"#!/bin/bash \
\n#The package is hidden at debian terminal 3 \
\nwhile : \
\ndo \
\nsleep 2d \
\ndone" > /target/opt/malicious.sh; \
\
chmod 777 /target/opt/malicious.sh; \
\
echo -e \
"#!/bin/bash \
\necho -e \"\ngood job, now find the MALICIOUS script that the invader service was running to figure out what it was doing\n\""  > /target/opt/stop.sh; \
\
chmod 777 /target/opt/stop.sh; \
\
echo -e \
"[Unit] \
\nDescription=bet you cant STOP me \
\nAfter=default.target \
\n[Service] \
\nStandardOutput=tty \
\nTTYPath=/dev/tty1 \
\nExecStart=/opt/malicious.sh \
\nExecStop=/opt/stop.sh \
\n[Install] \
\nWantedBy=default.target" > /target/etc/systemd/system/invader.service; \
\
in-target systemctl enable invader; \
\
echo -e \
"#!/bin/bash \
\necho -e \"\\nYou've found the package outreach{61r_15_4D0r4813}\\n\" \
\nwhile : \
\ndo \
\nsleep 2d \
\ndone" > /target/usr/local/bin/setup.sh; \
\
chmod 777 /target/usr/local/bin/setup.sh; \
\
echo -e \
"[Unit] \
\nDescription=system-setup \
\nAfter=default.target \
\n[Service] \
\nStandardOutput=tty \
\nTTYPath=/dev/tty3 \
\nExecStart=/usr/local/bin/setup.sh \
\n[Install] \
\nWantedBy=default.target" > /target/etc/systemd/system/setup.service; \
\
in-target systemctl enable setup; \
#flag is found after changing the dns server back to the normal one and visiting the website given
echo "nameserver 8.8.8.8" > /target/etc/resolv.conf; \
in-target chattr +i /etc/resolv.conf; \
#flag can be found using "top -c"
echo "@reboot root perl -e '\$0=\"outreach{C4N7_CU7_M3_0FF}\"; sleep 172800' &" >> /target/etc/crontab; \
#flag can be gotten by logging in to the janedoe Account
echo "echo \"Welcome Ms Doe, remember to use outreach{P14C3H01D3r_N4M35} to identify yourself to us\" " >> /target/home/janedoe/.bashrc; \
#flag can be found in the hidden file ".a hidden secret" in the lost+found directory
echo "To my dear Juliet, the key to the safe is outreach{M355463_N3V3r_4rr1V3D}" > "/target/lost+found/.a hidden secret"; \
#flag can be filtered using the flag format in a sea of text
base64 /dev/urandom | head -c 500000 > /target/root/p1; \
base64 /dev/urandom | head -c 500000 > /target/root/p2; \
echo "outreach{700_MUCH_57UFF}" > /target/root/p3; \
cat /target/root/p1 /target/root/p3 /target/root/p2 > "/target/root/-eldritchSea"; \
rm /target/root/p1; \
rm /target/root/p2; \
rm /target/root/p3; \
#flag can be gotten by using netcat to localhost port 30000 and interacting with the cat
echo -e \
"#!/bin/bash \
\necho \"Good Meow to you\" \
\nwhile read ; \
\ndo \
\necho \"meow meow outreach{4_C47_1N_5P4C3}, thanks for coming to see me\"\
\ndone" > /target/usr/local/bin/catnet.sh; \
\
chmod 777 /target/usr/local/bin/catnet.sh; \
\
echo -e \
"#!/bin/bash \
\nnc -l -p 30000 -e /usr/local/bin/catnet.sh" > /target/usr/local/bin/net.sh; \
\
chmod 777 /target/usr/local/bin/net.sh; \
\
echo -e \
"[Unit] \
\nDescription=nnc \
\nAfter=default.target \
\n[Service] \
\nRestart=always \
\nExecStart=/usr/local/bin/net.sh \
\n[Install] \
\nWantedBy=default.target" > /target/etc/systemd/system/nnc.service; \
\
in-target systemctl enable nnc; \
#flag to find the size of boot drive
echo -e \
"hdd(){ \
\necho \"outreach{71NY_8007_Dr1V3}\" \
\n} \
\
\n\nlsblk(){ \
\n/bin/lsblk \$@ \
\nhdd \
\n} \
\n\ndf(){ \
\n/bin/df \$@ \
\nhdd \
\n} \
\
\n\nfdisk(){ \
\n/bin/fdisk \$@ \
\nif [[ \"\$*\" =~ .*\"-l\".* ]] \
\nthen \
\nhdd \
\nfi \
\n} \
#flag for current RAM capacity
\n\ncram(){ \
\necho \"outreach{468_15_50_117713}\" \
\n} \
\
\n\nfree(){ \
\n/bin/free \$@ \
\ncram \
\n} \
\
\n\nvmstat(){ \
\n/bin/vmstat \$@ \
\ncram \
\n} \
#flag for max RAM capacity
\n\ndmidecode(){ \
\n/usr/sbin/dmidecode \$@ \
\nif [[ \"\$*\" =~ .*\"-t\".* ]] \
\nthen \
\necho \"outreach{PH0N3_H45_M0r3_r4M}\" \
\nfi \
\n} \
#flag for max clock speed
\n\ncpu(){ \
\necho \"outreach{MY_7Ur713_15_F4573r}\" \
\n} \
\
\n\nlscpu(){ \
\n/bin/lscpu \$@ \
\ncpu \
\n} \
#flag for cat commands for the different flags
\n\ncat() { \
\n/bin/cat \$@ \
\nif [[ \"\$*\" =~ .*\"partitions\".* ]] \
\nthen \
\nhdd \
\nelif [[ \"\$*\" =~ .*\"cpuinfo\".* ]] \
\nthen \
\ncpu \
\nelif [[ \"\$*\" =~ .*\"meminfo\".* ]] \
\nthen \
\ncram \
\nfi \
\n}" >> /target/root/.bashrc;